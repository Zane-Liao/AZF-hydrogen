cmake_minimum_required(VERSION 3.10)
project(engine_core LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_BUILD_TYPE Debug)

# ==================== Sources ====================
file(GLOB CORE_SOURCES "engine_core/ecs/src/*.cpp")
file(GLOB TEST_SOURCES "tests/ecs/*.cpp")

# ==================== Include ====================
set(CORE_INCLUDE "${CMAKE_SOURCE_DIR}/engine_core/ecs/include")

# ==================== FetchContent ====================
include(FetchContent)

# Abseil
FetchContent_Declare(
    abseil
    GIT_REPOSITORY https://github.com/abseil/abseil-cpp.git
    GIT_TAG master
)
FetchContent_MakeAvailable(abseil)

# GLFW
find_package(OpenGL REQUIRED)
FetchContent_Declare(
    glfw
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG 3.4
)
FetchContent_MakeAvailable(glfw)

add_compile_definitions(GL_SILENCE_DEPRECATION)


# ==================== Rust module ====================
# add_library(rendering STATIC IMPORTED)
# set_target_properties(rendering PROPERTIES
#     IMPORTED_LOCATION "${CMAKE_SOURCE_DIR}/engine_core/rendering/target/release/librendering.a"
# )

# ==================== Engine Core Library ====================
add_library(engine_core STATIC ${CORE_SOURCES})
target_include_directories(engine_core PUBLIC ${CORE_INCLUDE})
target_link_libraries(engine_core PUBLIC
    absl::flat_hash_map
    absl::flat_hash_set
    glfw
    OpenGL::GL
    # rendering
)

# ==================== Executable ====================
add_executable(engine_core_app engine_core/ecs/src/main.cpp)
target_link_libraries(engine_core_app PRIVATE engine_core)


# ==================== Tests ====================
find_package(GTest REQUIRED)
enable_testing()
add_executable(tests ${TEST_SOURCES})
target_include_directories(tests PRIVATE ${CORE_INCLUDE})
target_link_libraries(tests PRIVATE engine_core GTest::gtest GTest::gtest_main)
include(GoogleTest)
gtest_discover_tests(tests)

# ==================== Definitions ====================
add_compile_definitions(ENGINE_CORE_DIR="${CMAKE_SOURCE_DIR}")
add_compile_definitions(ENABLE_OPENGL=1)
# add_compile_definitions(ENABLE_RUST_RENDERING=1)

# ==================== Output directories ====================
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# ==================== clang-format ====================
find_program(CLANG_FORMAT clang-format)
if(CLANG_FORMAT)
    message(STATUS "clang-format found: ${CLANG_FORMAT}")
endif()